cmake_minimum_required(VERSION 3.8)
project(fastlio2)

set(CMAKE_BUILD_TYPE "Release")
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED True)

set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fexceptions" )
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -pthread -fexceptions")


if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES "Clang")
  add_compile_options(-O3)
  add_compile_options(-Wall -Wextra -Wpedantic)
endif()

add_compile_definitions(SOPHUS_USE_BASIC_LOGGING)

add_definitions(-DMP_EN)
add_definitions(-DMP_PROC_NUM=2)

# find dependencies
find_package(ament_cmake REQUIRED)
find_package(rclcpp REQUIRED)
find_package(std_msgs REQUIRED)
find_package(tf2 REQUIRED)
find_package(tf2_ros REQUIRED)
find_package(nav_msgs REQUIRED)
find_package(sensor_msgs REQUIRED)
find_package(livox_ros_driver2 REQUIRED)
find_package(pcl_conversions REQUIRED)
find_package(geometry_msgs REQUIRED)

find_package(vln_msgs QUIET)

find_package(OpenMP QUIET)
find_package(PCL REQUIRED)
find_package(Eigen3 REQUIRED)
find_package(Sophus REQUIRED)
find_package(yaml-cpp REQUIRED)
find_package(glog REQUIRED)

set(DEPENDENCIES_COMBINE)
if (vln_msgs_FOUND)
    message(STATUS "Found vln_msgs package")
    list(APPEND DEPENDENCIES_COMBINE vln_msgs)
    add_definitions(-DVLN_MSGS_FOUND)
else()
    message(STATUS "vln_msgs package not found")
endif()


set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS}   ${OpenMP_C_FLAGS}")

set(SRC_LIST src/map_builder/commons.cpp
             src/map_builder/ieskf.cpp
             src/map_builder/imu_processor.cpp
             src/map_builder/ikd_Tree.cpp
             src/map_builder/lidar_processor.cpp
             src/map_builder/map_builder.cpp
             src/map_builder/imu_pose_predictor.cpp
             src/utils.cpp
             src/lio_node.cpp
             src/lio_localization_node.cpp
             src/icp_localizer.cpp
             src/pose_transform_node.cpp
             src/accumulate_lidar_cloud_for_calib.cpp)

add_library(map_builder SHARED ${SRC_LIST})
ament_target_dependencies(map_builder rclcpp std_msgs tf2 tf2_ros nav_msgs sensor_msgs livox_ros_driver2 
pcl_conversions geometry_msgs ${DEPENDENCIES_COMBINE})
target_link_libraries(map_builder 
  yaml-cpp
  ${PCL_LIBRARIES})
       
add_executable(lio_node src/lio_main.cpp)
target_link_libraries(lio_node
  map_builder
  glog
)

add_executable(localization_node src/lio_localization_main.cpp)
target_link_libraries(localization_node
  map_builder
  glog
)

add_executable(accumulate_lidar_cloud src/accumulate_main.cpp)
target_link_libraries(accumulate_lidar_cloud
  map_builder
  glog
)


install(TARGETS lio_node localization_node accumulate_lidar_cloud DESTINATION lib/${PROJECT_NAME})
install(TARGETS map_builder
    ARCHIVE DESTINATION lib
    LIBRARY DESTINATION lib
    RUNTIME DESTINATION lib
)
install(DIRECTORY launch DESTINATION share/${PROJECT_NAME})
install(DIRECTORY rviz DESTINATION share/${PROJECT_NAME})
install(DIRECTORY config DESTINATION share/${PROJECT_NAME})




if(BUILD_TESTING)
  find_package(ament_lint_auto REQUIRED)
  # the following line skips the linter which checks for copyrights
  # comment the line when a copyright and license is added to all source files
  set(ament_cmake_copyright_FOUND TRUE)
  # the following line skips cpplint (only works in a git repo)
  # comment the line when this package is in a git repo and when
  # a copyright and license is added to all source files
  set(ament_cmake_cpplint_FOUND TRUE)
  ament_lint_auto_find_test_dependencies()
endif()

ament_package()
